# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Represent an address"""
type AddressEntity {
  addressLine1: String
  addressLine2: String
  addressLine3: String
  city: String

  """Address code"""
  code: String!
  country: String
  countryName: String
  description: String

  """List of email addresses associated with the address"""
  emails: [String]

  """Entity number"""
  entityNumber: String!
  entityType: Int!

  """Flag to set if is default address"""
  isDefault: Int

  """List of phone numbers associated with the address"""
  phones: [String]
  state: String
  zipCode: String
}

input CreateAddressInput {
  """The first line of the address."""
  addressLine1: String!

  """The second line of the address, if applicable."""
  addressLine2: String

  """The third line of the address, if applicable."""
  addressLine3: String

  """The city for the address."""
  city: String

  """The unique code for the address."""
  code: String!

  """The country code for the address."""
  country: String!

  """A brief description of the address."""
  description: String

  """List of email addresses associated with the address."""
  emails: [String!]

  """List of phone numbers associated with the address."""
  phones: [String!]

  """The state or province for the address."""
  state: String

  """The postal or zip code for the address."""
  zipCode: String
}

input CreateCustomerInput {
  """The category of the customer."""
  category: String!

  """The unique code for the new customer."""
  customerCode: String!

  """The default address for this customer."""
  defaultAddress: CreateAddressInput!

  """European VAT Number"""
  europeanUnionVatNumber: String!

  """The language preference for the customer."""
  language: String

  """Customer name"""
  name: String!

  """Short name for the customer, if applicable."""
  shortName: String
}

input CreateSupplierInput {
  """The category of the supplier."""
  category: String!

  """The default address for this supplier."""
  defaultAddress: CreateAddressInput!

  """European VAT Number"""
  europeanUnionVatNumber: String!

  """The language preference for the supplier."""
  language: String

  """Supplier name"""
  name: String!

  """Short name for the supplier, if applicable."""
  shortName: String

  """The unique code for the new supplier."""
  supplierCode: String!
}

type CustomerConnection {
  edges: [CustomerEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Represents a customer in the system"""
type CustomerEntity {
  addresses: [AddressEntity]
  category: String

  """Customer code"""
  customerCode: String!
  customerCurrency: String
  customerName: String

  """Customer default address code"""
  defaultAddressCode: String
  europeanUnionVatNumber: String
  isActive: Int
  shortName: String
}

type CustomerEntityEdge {
  cursor: String!
  node: CustomerEntity!
}

input CustomerFilter {
  category: String

  """Filter by a list of cities"""
  cities: [String!]

  """Filter by city"""
  city: String

  """Filter by a list of country codes (e.g., ["PT", "GB"]"""
  countries: [String!]

  """
  Filter by country code (e.g., "PT"
  """
  country: String

  """Filter customers by name (case-insensitive search)"""
  customerName: String

  """Filter by European Union VAT Number"""
  europeanUnionVatNumber: String
}

type Mutation {
  createCustomer(input: CreateCustomerInput!): CustomerEntity!
  createSupplier(input: CreateSupplierInput!): SupplierEntity!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  customer(customerCode: ID!): CustomerEntity!
  customers(
    """Cursor for the next page"""
    after: String
    filter: CustomerFilter

    """Number of items to return"""
    first: Int! = 10
  ): CustomerConnection!
  supplier(supplierCode: ID!): SupplierEntity!
  suppliers(
    """Cursor for the next page"""
    after: String
    filter: SupplierFilter

    """Number of items to return"""
    first: Int! = 10
  ): SupplierConnection!
}

type SupplierConnection {
  edges: [SupplierEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Represents a supplier in the system"""
type SupplierEntity {
  addresses: [AddressEntity]
  category: String

  """Supplier default address code"""
  defaultAddressCode: String
  europeanUnionVatNumber: String
  isActive: Int
  shortName: String

  """Supplier code"""
  supplierCode: String!
  supplierCurrency: String
  supplierName: String
}

type SupplierEntityEdge {
  cursor: String!
  node: SupplierEntity!
}

input SupplierFilter {
  category: String

  """Filter by a list of cities"""
  cities: [String!]

  """Filter by city"""
  city: String

  """Filter by a list of country codes (e.g., ["PT", "GB"]"""
  countries: [String!]

  """
  Filter by country code (e.g., "PT"
  """
  country: String

  """Filter by European Union VAT Number"""
  europeanUnionVatNumber: String

  """Filter suppliers by name (case-insensitive search)"""
  supplierName: String
}