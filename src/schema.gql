# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Represent an address"""
type AddressEntity {
  addressLine1: String
  addressLine2: String
  addressLine3: String
  city: String

  """Address code"""
  code: String!
  country: String
  countryName: String
  description: String

  """List of email addresses associated with the address"""
  emails: [String]

  """Entity number"""
  entityNumber: String!
  entityType: Int!

  """Flag to set if is default address"""
  isDefault: Int

  """List of phone numbers associated with the address"""
  phones: [String]
  state: String
  zipCode: String
}

"""Closing a sales order line"""
input CloseSalesOrderLineInput {
  """The unique sales order number"""
  id: ID!

  """A list of sales order line numbers to close"""
  lines: [Int!]!
}

type CompanyConnection {
  edges: [CompanyEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Represent a company"""
type CompanyEntity {
  addresses: [AddressEntity]
  company: String!
  companyName: String!
  country: String
  defaultAddress: String
  dimension1: String
  dimension2: String
  dimension3: String
  dimension4: String
  dimension5: String
  dimension6: String
  dimension7: String
  dimensionType1: String
  dimensionType2: String
  dimensionType3: String
  dimensionType4: String
  dimensionType5: String
  dimensionType6: String
  dimensionType7: String
  isLegalCompany: Boolean!
  legislation: String!
  sites: [SiteEntity]
  standardName: String!
}

type CompanyEntityEdge {
  cursor: String!
  node: CompanyEntity!
}

input CompanyFilter {
  """Filter by one or more company codes"""
  companyCode_in: [String!]

  """Filter by one or more country codes"""
  country_in: [String!]
}

input CompanyFilterInput {
  company: CompanyFilter
  sites_some: SiteFilter
}

input CreateAddressInput {
  """The first line of the address."""
  addressLine1: String!

  """The second line of the address, if applicable."""
  addressLine2: String

  """The third line of the address, if applicable."""
  addressLine3: String

  """The city for the address."""
  city: String

  """The unique code for the address."""
  code: String!

  """The country code for the address."""
  country: String!

  """A brief description of the address."""
  description: String

  """List of email addresses associated with the address."""
  emails: [String!]

  """List of phone numbers associated with the address."""
  phones: [String!]

  """The state or province for the address."""
  state: String

  """The postal or zip code for the address."""
  zipCode: String
}

input CreateCustomerInput {
  """The category of the customer."""
  category: String!

  """The unique code for the new customer."""
  customerCode: String!

  """The default address for this customer."""
  defaultAddress: CreateAddressInput!

  """European VAT Number"""
  europeanUnionVatNumber: String!

  """The language preference for the customer."""
  language: String

  """Customer name"""
  name: String!

  """Short name for the customer, if applicable."""
  shortName: String
}

input CreateProductInput {
  """Optional: The accounting code for the product."""
  accountingCode: String

  """Optional: The base price for the product."""
  basePrice: Float

  """The unique code for the new product."""
  code: ID!

  """List of descriptions. The first one is required."""
  descriptions: [String!]!

  """The code of an existing Product Category to inherit properties."""
  productCategoryCode: String!

  """
  Optional: List of product statistical groups. If not provided, will be inherited from the category.
  """
  productStatisticalGroup: [String]

  """
  Optional: Purchase Unit. If not provided, will be inherited from the category.
  """
  purchaseUnit: String

  """
  Optional: Sales Unit. If not provided, will be inherited from the category.
  """
  salesUnit: String

  """
  Optional: List of tax levels. If not provided, will be inherited from the category.
  """
  taxesLevel: [String]
}

"""Data to create a sales order, include header and lines"""
input CreateSalesOrderInput {
  """Currency code"""
  currency: String

  """Reference"""
  customerOrderReference: String

  """An array with all products to order."""
  lines: [CreateSalesOrderLineInput!]!

  """Order date - YYYYMMDD"""
  orderDate: Date

  """Payment term"""
  paymentTerm: String

  """Price -/+ tax"""
  priceIncludingOrExcludingTax: Int

  """Requested delivery date - YYYYMMDD"""
  requestedDeliveryDate: Date

  """Sales order type"""
  salesOrderType: String

  """Sales site"""
  salesSite: String!

  """Delivery address code"""
  shipToCustomerAddress: String

  """Shipment date - YYYYMMDD"""
  shipmentDate: Date

  """Shipment site"""
  shipmentSite: String

  """Sold-to-customer code"""
  soldToCustomer: String!

  """Tax rule"""
  taxRule: String
}

input CreateSalesOrderLineInput {
  """List of dimensions pairs (type and value)"""
  dimensions: [DimensionInput!]

  """Unit price of the product"""
  grossPrice: Float

  """Product SKU"""
  product: String!

  """Quantity of the product in sales unit"""
  quantity: Float!

  """Tax level code for the product"""
  taxLevelCode: String
}

input CreateSupplierInput {
  """The category of the supplier."""
  category: String!

  """The default address for this supplier."""
  defaultAddress: CreateAddressInput!

  """European VAT Number"""
  europeanUnionVatNumber: String!

  """The language preference for the supplier."""
  language: String

  """Supplier name"""
  name: String!

  """Short name for the supplier, if applicable."""
  shortName: String

  """The unique code for the new supplier."""
  supplierCode: String!
}

type CustomerConnection {
  edges: [CustomerEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Represents a customer in the system"""
type CustomerEntity {
  addresses: [AddressEntity]
  category: String

  """Customer code"""
  customerCode: String!
  customerCurrency: String
  customerName: String

  """Customer default address code"""
  defaultAddressCode: String
  europeanUnionVatNumber: String
  isActive: Int
  shortName: String
}

type CustomerEntityEdge {
  cursor: String!
  node: CustomerEntity!
}

input CustomerFilter {
  category: String

  """Filter by a list of cities"""
  cities: [String!]

  """Filter by city"""
  city: String

  """Filter by a list of country codes (e.g., ["PT", "GB"]"""
  countries: [String!]

  """
  Filter by country code (e.g., "PT"
  """
  country: String

  """Filter customers by name (case-insensitive search)"""
  customerName: String

  """Filter by European Union VAT Number"""
  europeanUnionVatNumber: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Decimal custom scalar type for Prisma.Decimal."""
scalar Decimal

type Dimension {
  description: String!

  """The unique code for the dimension value."""
  dimension: ID!

  """The type of this dimension."""
  dimensionType: String!
}

type DimensionConnection {
  edges: [DimensionEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DimensionEntityEdge {
  cursor: String!
  node: Dimension!
}

input DimensionFilterInput {
  """Search term for the dimension description."""
  description_contains: String

  """The type of dimension to filter by. This field is required."""
  dimensionTypeCode_equals: String!
}

input DimensionInput {
  """The code of the dimension type (e.g., "DEP")."""
  typeCode: String!

  """The value for the dimension (e.g., "SALES")."""
  value: String!
}

type DimensionType {
  """The description of the dimension type."""
  description: String!

  """The unique code for the dimension type."""
  dimension: ID!
}

type Mutation {
  closeSalesOrderLines(input: CloseSalesOrderLineInput!): [SalesOrderLine!]!
  createCustomer(input: CreateCustomerInput!): CustomerEntity!
  createProduct(input: CreateProductInput!): Product!
  createSalesOrder(input: CreateSalesOrderInput!): SalesOrder!
  createSupplier(input: CreateSupplierInput!): SupplierEntity!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""Product entity representing a product in the system"""
type Product {
  """Base price of the product"""
  basePrice: Float

  """Unique identifier for the product"""
  code: ID!

  """List of product description"""
  descriptions: [String]

  """Category of the product"""
  productCategory: String!

  """List of product statistical group"""
  productStatisticalGroup: [String]
  purchaseUnit: String!
  salesUnit: String!

  """List of product tax level"""
  taxesLevel: [String]
}

type ProductConnection {
  edges: [ProductEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductEntityEdge {
  cursor: String!
  node: Product!
}

input ProductFilter {
  """Filter by a specific product category code."""
  categoryCode_equals: String

  """Filter by one or more product codes."""
  code_in: [String!]

  """Search term for product descriptions."""
  description_contains: String

  """Search term form product statistical group"""
  statisticalGroup_contains: String

  """Search term for product tax level"""
  taxLevel_contains: String
}

type Query {
  companies(
    """Cursor for the next page"""
    after: String
    filter: CompanyFilterInput

    """Number of items to return"""
    first: Int! = 10
  ): CompanyConnection!
  customer(customerCode: ID!): CustomerEntity!
  customers(
    """Cursor for the next page"""
    after: String
    filter: CustomerFilter

    """Number of items to return"""
    first: Int! = 10
  ): CustomerConnection!
  dimensionTypes: [DimensionType!]!
  dimensions(
    """Cursor for the next page"""
    after: String
    filter: DimensionFilterInput!

    """Number of items to return"""
    first: Int! = 10
  ): DimensionConnection!
  product(code: ID!): Product
  products(
    """Cursor for the next page"""
    after: String
    filter: ProductFilter

    """Number of items to return"""
    first: Int! = 10
  ): ProductConnection!
  salesOrder(id: ID!): SalesOrder
  salesOrders(
    """Cursor for the next page"""
    after: String
    filter: SalesOrderFilterInput

    """Number of items to return"""
    first: Int! = 10
  ): SalesOrderConnection!
  supplier(supplierCode: ID!): SupplierEntity!
  suppliers(
    """Cursor for the next page"""
    after: String
    filter: SupplierFilter

    """Number of items to return"""
    first: Int! = 10
  ): SupplierConnection!
}

type SalesOrder {
  """Information about the bill-to customer"""
  billTo: SalesOrderBillToCustomerInfo

  """Currency code of the sales order"""
  currency: String!

  """Currency rate of the sales order"""
  currencyRate: Float

  """Currency rate type"""
  currencyRateType: Int

  """Sales order customer reference"""
  customerOrderReference: String

  """The unique sales order number"""
  id: ID!

  """The lines of the sales order"""
  lines: [SalesOrderLine!]!

  """Sales order date"""
  orderDate: DateTime!

  """Sales order requested delivery date"""
  requestedDeliveryDate: DateTime

  """Sales site"""
  salesSite: String!

  """Information about the ship-to customer"""
  shipTo: SalesOrderShipToCustomerInfo

  """Sales order shipping date"""
  shippingDate: DateTime

  """Information about the sold-to customer"""
  soldTo: SalesOrderSoldToCustomerInfo

  """Taxe rule"""
  taxRule: String

  """Total amount of the order, excluding taxes"""
  totalAmountExcludingTax: Float!

  """Total amount of the order, including taxes"""
  totalAmountIncludingTax: Float!
}

type SalesOrderBillToCustomerInfo {
  """Bill-to-customer address lines."""
  billAddressLines: [String!]

  """Bill-to-customer address code."""
  billToCustomerAddress: String

  """Bill-to-customer city."""
  billToCustomerCity: String

  """Bill-to-customer code."""
  billToCustomerCode: String

  """Bill-to-customer country code."""
  billToCustomerCountry: String

  """Bill-to-customer country name."""
  billToCustomerCountryName: String

  """Bill-to-customer European Union VAT number."""
  billToCustomerEuropeanUnionVatNumber: String

  """Bill-to-customer name."""
  billToCustomerName: [String!]

  """Bill-to-customer postal code."""
  billToCustomerPostalCode: String

  """Bill-to-customer state."""
  billToCustomerState: String
}

type SalesOrderConnection {
  edges: [SalesOrderEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SalesOrderEntityEdge {
  cursor: String!
  node: SalesOrder!
}

input SalesOrderFilterInput {
  """Filter by one or more customer codes."""
  customerCode_in: [String!]

  """Find orders created on or after this date."""
  orderDate_gte: Date

  """Find orders created on or before this date."""
  orderDate_lte: Date

  """Filter by one or more order IDs."""
  orderId_in: [String!]

  """Filter by one or more sales sites."""
  salesSite_in: [String!]
}

type SalesOrderLine {
  grossPrice: Float
  id: ID!
  lineNumber: Int!
  netPrice: Float

  """The quantity ordered in the sales unit."""
  orderedQuantity: Float!
  product: Product
  requestedDeliveryDate: DateTime!
  shipmentDate: DateTime!

  """Status of the sales order line."""
  status: Int

  """Tax levels applied to this line."""
  taxLevels: [String!]
}

type SalesOrderShipToCustomerInfo {
  """Ship-to-customer address lines."""
  shipAddressLines: [String!]

  """Ship-to-customer address code."""
  shipToCustomerAddress: String

  """Ship-to-customer city."""
  shipToCustomerCity: String

  """Ship-to-customer code."""
  shipToCustomerCode: String

  """Ship-to-customer country code."""
  shipToCustomerCountry: String

  """Ship-to-customer country name."""
  shipToCustomerCountryName: String

  """Ship-to-customer European Union VAT number."""
  shipToCustomerEuropeanUnionVatNumber: String

  """Ship-to-customer name."""
  shipToCustomerName: [String!]

  """Ship-to-customer postal code."""
  shipToCustomerPostalCode: String

  """Ship-to-customer state."""
  shipToCustomerState: String
}

type SalesOrderSoldToCustomerInfo {
  """Sold-to-customer address lines."""
  soldAddressLines: [String!]

  """Sold-to-customer address code."""
  soldToCustomerAddress: String

  """Sold-to-customer city."""
  soldToCustomerCity: String

  """Sold-to-customer code."""
  soldToCustomerCode: String

  """Sold-to-customer country code."""
  soldToCustomerCountry: String

  """Sold-to-customer country name."""
  soldToCustomerCountryName: String

  """Sold-to-customer name."""
  soldToCustomerName: [String!]

  """Sold-to-customer postal code."""
  soldToCustomerPostalCode: String

  """Sold-to-customer state."""
  soldToCustomerState: String
}

"""Represent a company site"""
type SiteEntity {
  addresses: [AddressEntity!]!
  country: String!
  defaultAddress: String
  dimension1: String
  dimension2: String
  dimension3: String
  dimension4: String
  dimension5: String
  dimension6: String
  dimension7: String
  dimensionType1: String
  dimensionType2: String
  dimensionType3: String
  dimensionType4: String
  dimensionType5: String
  dimensionType6: String
  dimensionType7: String
  legalCompany: String!
  legislation: String!
  siteCode: String!
  siteName: String!
  standardName: String!
}

input SiteFilter {
  """Filter sites by one or more cities"""
  address_city_in: [String!]

  """Filter sites by one or more countries"""
  address_country_in: [String!]

  """Filter sites by an exact zip code"""
  address_zipCode_equals: String

  """Filter by one or more site codes"""
  siteCode_in: [String!]
}

type SupplierConnection {
  edges: [SupplierEntityEdge]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Represents a supplier in the system"""
type SupplierEntity {
  addresses: [AddressEntity]
  category: String

  """Supplier default address code"""
  defaultAddressCode: String
  europeanUnionVatNumber: String
  isActive: Int
  shortName: String

  """Supplier code"""
  supplierCode: String!
  supplierCurrency: String
  supplierName: String
}

type SupplierEntityEdge {
  cursor: String!
  node: SupplierEntity!
}

input SupplierFilter {
  category: String

  """Filter by a list of cities"""
  cities: [String!]

  """Filter by city"""
  city: String

  """Filter by a list of country codes (e.g., ["PT", "GB"]"""
  countries: [String!]

  """
  Filter by country code (e.g., "PT"
  """
  country: String

  """Filter by European Union VAT Number"""
  europeanUnionVatNumber: String

  """Filter suppliers by name (case-insensitive search)"""
  supplierName: String
}