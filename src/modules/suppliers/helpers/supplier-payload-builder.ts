import { Prisma, SupplierCategory } from '@prisma/client';
import { CommonService } from 'src/common/services/common.service';
import { generateUUIDBuffer, getAuditTimestamps } from '../../../common/utils/audit-date.utils';
import { CreateSupplierInput } from '../dto/create-supplier.input';

export type SupplierCreationPayloads = {
  businessPartner: Prisma.BusinessPartnerUncheckedCreateInput;
  supplier: Prisma.SupplierUncheckedCreateInput;
  address: Prisma.AddressUncheckedCreateInput;
};

/**
 * Constrói os payloads para a criação de um novo fornecedor e suas entidades relacionadas.
 * @param input - O DTO vindo da mutation do GraphQL.
 * @param category - O objeto completo da categoria de fornecedor.
 * @param commonService - Serviço comum para operações auxiliares.
 * @returns Um objeto contendo os payloads para BusinessPartner, Supplier e Address.
 */
export async function buildPayloadCreateSupplier(
  input: CreateSupplierInput,
  category: SupplierCategory,
  commonService: CommonService,
): Promise<SupplierCreationPayloads> {
  const businessPartnerPayload: Prisma.BusinessPartnerUncheckedCreateInput = {
    code: input.supplierCode,
    isActive: 2,
    category: input.category,
    partnerName1: input.name,
    shortCompanyName: input.shortName,
    europeanUnionVatNumber: input.europeanUnionVatNumber,
    country: input.defaultAddress.country,
    currency: category.supplierCurrency,
    language: input.language ?? category.language,
    defaultAddress: input.defaultAddress.code,
    isSupplier: 2,
    accountingCode: category.accountingCode,
    createDate: getAuditTimestamps().date,
    updateDate: getAuditTimestamps().date,
    createDatetime: getAuditTimestamps().dateTime,
    updateDatetime: getAuditTimestamps().dateTime,
    singleID: generateUUIDBuffer(),
  };

  const supplierPayload: Prisma.SupplierUncheckedCreateInput = {
    supplierCode: input.supplierCode,
    supplierName: input.name,
    shortName: input.shortName,
    category: input.category,
    addressByDefault: input.defaultAddress.code,
    isActive: 2,
    supplierType: category.supplierType,
    billBySupplier: input.supplierCode,
    billBySupplierAddress: input.defaultAddress.code,
    payToBusinessPartner: input.supplierCode,
    payToBusinessPartnerAddress: input.defaultAddress.code,
    groupSupplier: input.supplierCode,
    riskSupplier: input.supplierCode,
    currency: category.supplierCurrency,
    rateType: category.rateType,
    taxRule: category.taxRule,
    paymentTerm: category.paymentTerm,
    earlyDiscount: category.earlyDiscount,
    percentageOrAmount1: category.percentageOrAmount1,
    percentageOrAmount2: category.percentageOrAmount2,
    percentageOrAmount3: category.percentageOrAmount3,
    percentageOrAmount4: category.percentageOrAmount4,
    percentageOrAmount5: category.percentageOrAmount5,
    percentageOrAmount6: category.percentageOrAmount6,
    percentageOrAmount7: category.percentageOrAmount7,
    percentageOrAmount8: category.percentageOrAmount8,
    percentageOrAmount9: category.percentageOrAmount9,
    percentageOrAmount10: category.percentageOrAmount10,
    percentageOrAmount11: category.percentageOrAmount11,
    percentageOrAmount12: category.percentageOrAmount12,
    percentageOrAmount13: category.percentageOrAmount13,
    percentageOrAmount14: category.percentageOrAmount14,
    percentageOrAmount15: category.percentageOrAmount15,
    percentageOrAmount16: category.percentageOrAmount16,
    percentageOrAmount17: category.percentageOrAmount17,
    percentageOrAmount18: category.percentageOrAmount18,
    percentageOrAmount19: category.percentageOrAmount19,
    percentageOrAmount20: category.percentageOrAmount20,
    percentageOrAmount21: category.percentageOrAmount21,
    percentageOrAmount22: category.percentageOrAmount22,
    percentageOrAmount23: category.percentageOrAmount23,
    percentageOrAmount24: category.percentageOrAmount24,
    percentageOrAmount25: category.percentageOrAmount25,
    percentageOrAmount26: category.percentageOrAmount26,
    percentageOrAmount27: category.percentageOrAmount27,
    percentageOrAmount28: category.percentageOrAmount28,
    percentageOrAmount29: category.percentageOrAmount29,
    percentageOrAmount30: category.percentageOrAmount30,
    statisticalGroup1: category.statisticalGroup1,
    statisticalGroup2: category.statisticalGroup2,
    statisticalGroup3: category.statisticalGroup3,
    statisticalGroup4: category.statisticalGroup4,
    statisticalGroup5: category.statisticalGroup5,
    creditControl: category.creditControl,
    minimumOrderAmount: category.minimumOrderAmount,
    paymentBank: category.paymentBank,
    accountingCode: category.accountingCode,
    dimensionType1: category.dimensionType1,
    dimensionType2: category.dimensionType2,
    dimensionType3: category.dimensionType3,
    dimensionType4: category.dimensionType4,
    dimensionType5: category.dimensionType5,
    dimensionType6: category.dimensionType6,
    dimensionType7: category.dimensionType7,
    dimensionType8: category.dimensionType8,
    dimensionType9: category.dimensionType9,
    dimensionType10: category.dimensionType10,
    dimensionType11: category.dimensionType11,
    dimensionType12: category.dimensionType12,
    dimensionType13: category.dimensionType13,
    dimensionType14: category.dimensionType14,
    dimensionType15: category.dimensionType15,
    dimensionType16: category.dimensionType16,
    dimensionType17: category.dimensionType17,
    dimensionType18: category.dimensionType18,
    dimensionType19: category.dimensionType19,
    dimensionType20: category.dimensionType20,
    dimension1: category.dimension1,
    dimension2: category.dimension2,
    dimension3: category.dimension3,
    dimension4: category.dimension4,
    dimension5: category.dimension5,
    dimension6: category.dimension6,
    dimension7: category.dimension7,
    dimension8: category.dimension8,
    dimension9: category.dimension9,
    dimension10: category.dimension10,
    dimension11: category.dimension11,
    dimension12: category.dimension12,
    dimension13: category.dimension13,
    dimension14: category.dimension14,
    dimension15: category.dimension15,
    dimension16: category.dimension16,
    dimension17: category.dimension17,
    dimension18: category.dimension18,
    dimension19: category.dimension19,
    dimension20: category.dimension20,
    supplierABCClass: category.classABC,
    createDate: getAuditTimestamps().date,
    updateDate: getAuditTimestamps().date,
    createDatetime: getAuditTimestamps().dateTime,
    updateDatetime: getAuditTimestamps().dateTime,
    singleID: generateUUIDBuffer(),
  };

  const countryName = await commonService.getCountryNameByCode(input.defaultAddress.country ?? 'GB');
  const { phones = [], emails = [] } = input.defaultAddress;

  const addressPayload: Prisma.AddressUncheckedCreateInput = {
    entityType: 1,
    entityNumber: input.supplierCode,
    code: input.defaultAddress.code,
    description: input.defaultAddress.description,
    addressLine1: input.defaultAddress.addressLine1,
    addressLine2: input.defaultAddress.addressLine2 ?? '',
    addressLine3: input.defaultAddress.addressLine3 ?? '',
    zipCode: input.defaultAddress.zipCode ?? '',
    city: input.defaultAddress.city ?? '',
    state: input.defaultAddress.state ?? '',
    country: input.defaultAddress.country,
    countryName: countryName ?? '',
    addressPhoneNumber1: phones[0] ?? '',
    addressPhoneNumber2: phones[1] ?? '',
    addressPhoneNumber3: phones[2] ?? '',
    addressPhoneNumber4: phones[3] ?? '',
    addressPhoneNumber5: phones[4] ?? '',
    addressEmail1: emails[0] ?? '',
    addressEmail2: emails[1] ?? '',
    addressEmail3: emails[2] ?? '',
    addressEmail4: emails[3] ?? '',
    addressEmail5: emails[4] ?? '',
    isDefault: 2,
    createDate: getAuditTimestamps().date,
    updateDate: getAuditTimestamps().date,
    createDatetime: getAuditTimestamps().dateTime,
    updateDatetime: getAuditTimestamps().dateTime,
    singleID: generateUUIDBuffer(),
  };

  return {
    businessPartner: businessPartnerPayload,
    supplier: supplierPayload,
    address: addressPayload,
  };
}
